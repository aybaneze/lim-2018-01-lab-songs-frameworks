{"version":3,"sources":["components/ListMusic.jsx","Artist/artist.jsx","App.js","serviceWorker.js","index.js"],"names":["ListMusic","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","track","name","photo","keySong","tracks","colect","push","nameMusic","count","playcount","photoMusic","image","setState","react_default","a","createElement","className","src","map","data","App","music","_this2","fetch","then","json","artist","values","forEach","element","ListArtist","_loop","i","ListName","concat","dato","value","musicArtist","src_components_ListMusic","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAqDeA,qBClDMC,wBDEnB,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAETR,EAAKS,KAAOV,EAAMU,KAClBT,EAAKU,MAAQX,EAAMW,MACnBV,EAAKW,QAAUZ,EAAMY,QACrBX,EAAKY,OAASb,EAAMa,OARHZ,mFAYjB,IAAMa,EAASV,KAAKS,OACZJ,EAAUL,KAAKI,MAAfC,MACRA,EAAMM,KAAK,CACTC,UAAWF,EAAO,GAAGJ,KACrBO,MAAOH,EAAO,GAAGI,UACjBC,WAAYL,EAAO,GAAGM,MAAM,GAAG,WAEjChB,KAAKiB,SAAS,CAAEZ,2CAQhB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAKpB,KAAKM,MACVY,EAAAC,EAAAC,cAAA,OAAKE,IAAKtB,KAAKO,QACdP,KAAKI,MAAMC,MAAMkB,IAAI,SAAAC,GACpB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKI,EAAKZ,sBAnCAjB,cE+DT8B,cA7Db,SAAAA,EAAY7B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IAChB5B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXsB,MAAM,IAHQ7B,mFAOC,IAAA8B,EAAA3B,KACZ0B,EAAS1B,KAAKI,MAAdsB,MACLE,MAAM,iIACLC,KAAK,SAAAL,GAAI,OAAIA,EAAKM,SACdD,KAAK,SAAAE,GACJjC,OAAOkC,OAAOD,GAAQE,QAAQ,SAAAC,GAC3B,IAAIC,EAAaD,EAAQH,OADaK,EAAA,SAE9BC,GACR,IAAKC,EAAWH,EAAWE,GAAG/B,KAC1BC,EAAQ4B,EAAWE,GAAGrB,MAAM,GAAG,SAChCY,MAAK,uEAAAW,OAAwED,EAAxE,0DACFT,KAAK,SAAAL,GAAI,OAAGA,EAAKM,SACfD,KAAK,SAAAW,GACJ,IAAI,IAAIC,KAASD,EACdd,EAAMf,KAAK,CACTH,QAAS6B,EACT/B,KAAMgC,EACN/B,MAAOA,EACPE,OAAO+B,EAAKC,GAAOpC,QAExBsB,EAAKV,SAAS,CAACS,aAbxB,IAAI,IAAIW,KAAKF,EAAWC,EAAhBC,wCA0BjB,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,sBAEOpB,KAAKI,MAAMsB,MAAMH,IAAI,SAAAmB,GACrB,OACExB,EAAAC,EAAAC,cAACuB,EAAD,CACArC,KAAQoC,EAAYpC,KACpBC,MAASmC,EAAYnC,MACrBC,QAAYkC,EAAYlC,QACxBC,OAAQiC,EAAYjC,mBAnDlBd,aCKEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.f6305265.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ListMusic.css'\r\nimport Artist from '../Artist/artist';\r\n\r\nclass ListMusic extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      track: []\r\n    }\r\n    this.name = props.name;\r\n    this.photo = props.photo;\r\n    this.keySong = props.keySong;\r\n    this.tracks = props.tracks;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const colect = this.tracks;\r\n    const { track } = this.state;\r\n    track.push({\r\n      nameMusic: colect[0].name,\r\n      count: colect[0].playcount,\r\n      photoMusic: colect[0].image[0][\"#text\"]\r\n    })\r\n    this.setState({ track })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ListName\">\r\n        <h1>{this.name}</h1>\r\n        <img src={this.photo} />\r\n        {this.state.track.map(data => {\r\n          return (\r\n            <div>\r\n              <h1>{data.nameMusic}</h1>\r\n            </div>\r\n            // <Artist\r\n            //   nameMusic={data.nameMusic}\r\n            //   count={data.count}\r\n            //   photoMusic={data.photoMusic}\r\n            // />\r\n          )\r\n        })\r\n        }\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default ListMusic;","import React, {Component} from 'react';\r\nimport './artist.css'\r\n\r\nclass Artist extends Component{\r\n    constructor(props){\r\n       super(props)\r\n       this.nameMusic=props.nameMusic;\r\n       this.photoMusic=props.photoMusic;\r\n       this.count=props.count;\r\n    }\r\n\r\n// handleMusic(name,photo,count){\r\n//     console.log(name);\r\n// }\r\n\r\n    render(){\r\n        return(\r\n            \r\n            <div className=\"musics\">\r\n            <h3>{this.nameMusic}</h3>\r\n            <img src={this.photoMusic}/><br/>\r\n            <h4>{this.count}</h4> <i class=\"fas fa-heart fa-2x like\" ></i> <i class=\"fas fa-thumbs-down fa-2x dislike\"></i>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Artist;","import React, { Component } from 'react';\nimport './App.css';\nimport ListMusic from './components/ListMusic';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      music:[]\n    }\n  }\n\n  componentDidMount(){\n    let {music} = this.state;\n    fetch('http://ws.audioscrobbler.com/2.0/?method=library.getartists&api_key=01b1c7125fc579c17946cf1168dbc152&user=c4stles&format=json')\n    .then(data => data.json())\n        .then(artist=>{\n          Object.values(artist).forEach(element => {          \n             let ListArtist = element.artist;\n             for(let i in ListArtist){\n             let  ListName = ListArtist[i].name;\n             let photo = ListArtist[i].image[2]['#text'];\n                fetch(`http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${ListName}&api_key=01b1c7125fc579c17946cf1168dbc152&format=json`)\n                  .then(data=> data.json())\n                    .then(dato=>{  \n                      for(let value in dato){                              \n                         music.push({\n                           keySong: i, \n                           name: ListName,\n                           photo: photo,\n                           tracks:dato[value].track,              \n                         })\n                      this.setState({music});  \n                      }   \n                      \n                    })     \n             }\n            }\n          )\n          }\n         )\n        }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n       <h1>Song-Pop</h1>\n          {\n              this.state.music.map(musicArtist=>{ \n              return(\n                <ListMusic\n                name = {musicArtist.name}\n                photo = {musicArtist.photo}\n                keySong = { musicArtist.keySong}\n                tracks={musicArtist.tracks}           \n                />\n                \n              )\n            })\n            }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}